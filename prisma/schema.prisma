// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  name             String
  email            String          @unique
  password         String
  role             Role            @default(user)
  interests        String[]        @default(["all"])
  difficulty       Difficulty      @default(easy)
  isImgEnabled     Boolean         @default(false)
  isVideoEnabled   Boolean         @default(false)
  nativeLanguage   Language?       @default(English)
  learningLanguage Language?       @default(English)
  createdAt        DateTime        @default(now()) @map("created_at")
  // Relationships
  addedWords       Word[]          @relation("AddedWords")
  interactions     UserWord[]
  quizzes          Quiz[]
  leaderboard      Leaderboard?
  QuizAttempt      QuizAttempt[]
  QuizResult       QuizResult[]
  TranslateWord    TranslateWord[]
  EnglishWord      EnglishWord[]

  @@map("users")
}

model Word {
  id               String     @id @default(uuid())
  word             String
  meaning          String
  difficulty       Difficulty @default(easy)
  exampleSentences String[]   @map("example_sentences")
  imageUrl         String?    @map("image_url")
  videoUrl         String?    @map("video_url")
  createdAt        DateTime   @default(now()) @map("created_at")
  category         String     @default("all")
  prompt           String?    @map("prompt")

  // Relationships
  addedById     String          @map("added_by")
  addedBy       User            @relation("AddedWords", fields: [addedById], references: [id])
  interactions  UserWord[]
  translateWord TranslateWord[]
  englishWord   EnglishWord?

  @@map("words")
}

model UserWord {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  wordId       String    @map("word_id")
  isBookmarked Boolean   @default(false) @map("is_bookmarked")
  lastReviewed DateTime? @default(now()) @map("last_reviewed")

  // Relationships
  user        User         @relation(fields: [userId], references: [id])
  word        Word         @relation(fields: [wordId], references: [id])
  EnglishWord EnglishWord?

  @@unique([userId, wordId])
  @@map("user_words")
}

model TranslateWord {
  id                         String   @id @default(uuid())
  wordId                     String
  word                       Word     @relation(fields: [wordId], references: [id])
  wordLanguage               Language
  translatedWordLanguage     Language
  translatedWord             String
  translatedMeaning          String
  translatedExampleSentences String[]
  translatedCategory         String?
  userId                     String
  user                       User     @relation(fields: [userId], references: [id])
  createdAt                  DateTime @default(now())
}

model EnglishWord {
  id                      String   @id @default(uuid())
  wordId                  String   @unique
  word                    Word     @relation(fields: [wordId], references: [id])
  wordLanguage            Language
  englishWord             String
  englishMeaning          String
  englishExampleSentences String[]
  englishCategory         String?
  userId                  String
  user                    User     @relation(fields: [userId], references: [id])
  userWordId              String   @unique
  userWord                UserWord @relation(fields: [userWordId], references: [id])
  createdAt               DateTime @default(now())
}

model Quiz {
  id         String         @id @default(uuid())
  difficulty Difficulty
  duration   Int? // in minutes
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  questions  QuizQuestion[]
  attempts   QuizAttempt[]
  User       User?          @relation(fields: [userId], references: [id])
  userId     String?
}

model QuizQuestion {
  id            String       @id @default(uuid())
  quizId        String
  quiz          Quiz         @relation(fields: [quizId], references: [id])
  questionType  QuestionType
  questionText  String
  options       String[]     @default([]) // For multiple choice questions
  correctAnswer String
  explanation   String?
  points        Int          @default(1)
  createdAt     DateTime     @default(now())
  QuizResult    QuizResult[]
}

model QuizAttempt {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  quizId      String        @unique
  quiz        Quiz          @relation(fields: [quizId], references: [id])
  startedAt   DateTime      @default(now())
  completedAt DateTime?
  results     QuizResult[]
  score       Float?
  totalScore  Float?
  status      AttemptStatus @default(IN_PROGRESS)
}

model QuizResult {
  id         String       @id @default(uuid())
  attemptId  String
  attempt    QuizAttempt  @relation(fields: [attemptId], references: [id])
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id])
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  userAnswer String?
  isCorrect  Boolean
}

model Leaderboard {
  id         String @id @default(uuid())
  totalScore Int    @default(0) @map("total_score")

  // Relationships
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("leaderboard")
}

// Enums
enum Role {
  user
  admin
}

enum Difficulty {
  easy
  medium
  hard
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
  SHORT_ANSWER
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIMED_OUT
}

enum Language {
  Afrikaans
  Albanian
  Amharic
  Arabic
  Armenian
  Assamese
  Aymara
  Azerbaijani
  Bambara
  Basque
  Belarusian
  Bengali
  Bhojpuri
  Bosnian
  Bulgarian
  Catalan
  Cebuano
  Chinese_Simplified
  Chinese_Traditional
  Corsican
  Croatian
  Czech
  Danish
  Dhivehi
  Dogri
  Dutch
  English
  Esperanto
  Estonian
  Ewe
  Filipino_Tagalog
  Finnish
  French
  Frisian
  Galician
  Georgian
  German
  Greek
  Guarani
  Gujarati
  Haitian_Creole
  Hausa
  Hawaiian
  Hebrew
  Hindi
  Hmong
  Hungarian
  Icelandic
  Igbo
  Ilocano
  Indonesian
  Irish
  Italian
  Japanese
  Javanese
  Kannada
  Kazakh
  Khmer
  Kinyarwanda
  Konkani
  Korean
  Krio
  Kurdish
  Kurdish_Sorani
  Kyrgyz
  Lao
  Latin
  Latvian
  Lingala
  Lithuanian
  Luganda
  Luxembourgish
  Macedonian
  Maithili
  Malagasy
  Malay
  Malayalam
  Maltese
  Maori
  Marathi
  Meiteilon_Manipuri
  Mizo
  Mongolian
  Myanmar_Burmese
  Nepali
  Norwegian
  Nyanja_Chichewa
  Odia_Oriya
  Oromo
  Pashto
  Persian
  Polish
  Portuguese_Portugal
  Portuguese_Brazil
  Punjabi
  Quechua
  Romanian
  Russian
  Samoan
  Sanskrit
  Scots_Gaelic
  Sepedi
  Serbian
  Sesotho
  Shona
  Sindhi
  Sinhala_Sinhalese
  Slovak
  Slovenian
  Somali
  Spanish
  Sundanese
  Swahili
  Swedish
  Tagalog_Filipino
  Tajik
  Tamil
  Tatar
  Telugu
  Thai
  Tigrinya
  Tsonga
  Turkish
  Turkmen
  Twi_Akan
  Ukrainian
  Urdu
  Uyghur
  Uzbek
  Vietnamese
  Welsh
  Xhosa
  Yiddish
  Yoruba
  Zulu
}
