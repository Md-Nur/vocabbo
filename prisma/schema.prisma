// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  password     String
  role         Role         @default(user)
  interests    String[]     @default(["all"])
  createdAt    DateTime     @default(now()) @map("created_at")
  dificulty    Difficulty?  @default(easy)
  // Relationships
  addedWords   Word[]       @relation("AddedWords")
  interactions UserWord[]
  quizzes      Quiz[]
  leaderboard  Leaderboard?

  @@map("users")
}

model Word {
  id               String     @id @default(uuid())
  word             String     @unique
  meaning          String
  difficulty       Difficulty
  exampleSentences Json       @map("example_sentences")
  imageUrl         String?    @map("image_url")
  videoUrl         String?    @map("video_url")
  createdAt        DateTime   @default(now()) @map("created_at")

  // Relationships
  addedById    String     @map("added_by")
  addedBy      User       @relation("AddedWords", fields: [addedById], references: [id])
  categories   String[]   @default(["all"])
  interactions UserWord[]

  @@map("words")
}

model UserWord {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  wordId       String    @map("word_id")
  isBookmarked Boolean   @default(false) @map("is_bookmarked")
  lastReviewed DateTime? @default(now()) @map("last_reviewed")

  // Relationships
  user User @relation(fields: [userId], references: [id])
  word Word @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId])
  @@map("user_words")
}

model Quiz {
  id              String     @id @default(uuid())
  userId          String     @map("user_id")
  score           Int
  difficultyLevel Difficulty @map("difficulty_level")
  createdAt       DateTime   @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("quizzes")
}

model Leaderboard {
  id         String @id @default(uuid())
  userId     String @unique @map("user_id")
  totalScore Int    @default(0) @map("total_score")

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("leaderboard")
}

// Enums
enum Role {
  user
  admin
}

enum Difficulty {
  easy
  medium
  hard
}
